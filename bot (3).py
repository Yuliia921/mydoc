import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes,
    MessageHandler, CallbackQueryHandler, filters
)
from generate_pdf import generate_pdf
from io import BytesIO

TOKEN = os.getenv("BOT_TOKEN")
user_data = {}

FIELDS_ZAKL = ["–§–ò–û", "–í–æ–∑—Ä–∞—Å—Ç", "–î–∏–∞–≥–Ω–æ–∑", "–û–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ", "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"]
FIELDS_UZI = [
    "–§–ò–û", "–ü–æ—Å–ª–µ–¥–Ω—è—è –º–µ–Ω—Å—Ç—Ä—É–∞—Ü–∏—è", "–ü–æ–ª–æ–∂–µ–Ω–∏–µ –º–∞—Ç–∫–∏", "–†–∞–∑–º–µ—Ä –ø–ª–æ–¥–Ω–æ–≥–æ —è–π—Ü–∞", "–†–∞–∑–º–µ—Ä —ç–º–±—Ä–∏–æ–Ω–∞",
    "–ñ–µ–ª—Ç–æ—á–Ω—ã–π –º–µ—à–æ–∫", "–°–µ—Ä–¥—Ü–µ–±–∏–µ–Ω–∏–µ –∏ –ß–°–°", "–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ö–æ—Ä–∏–æ–Ω–∞", "–ñ–µ–ª—Ç–æ–µ —Ç–µ–ª–æ",
    "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", "–ó–∞–∫–ª—é—á–µ–Ω–∏–µ", "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"
]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üìù –ó–∞–∫–ª—é—á–µ–Ω–∏–µ", callback_data="zakl")],
        [InlineKeyboardButton("üå∏ –£–ó–ò –¥–ª—è –±–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö", callback_data="uzi")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω:", reply_markup=reply_markup)

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    chat_id = query.message.chat.id

    if query.data == "zakl":
        user_data[chat_id] = {"—à–∞–±–ª–æ–Ω": "–∑–∞–∫–ª—é—á–µ–Ω–∏–µ", "–ø–æ–ª—è": {}, "—à–∞–≥": 0}
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø–∞—Ü–∏–µ–Ω—Ç–∞:")
    elif query.data == "uzi":
        user_data[chat_id] = {"—à–∞–±–ª–æ–Ω": "—É–∑–∏", "–ø–æ–ª—è": {}, "—à–∞–≥": 0}
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø–∞—Ü–∏–µ–Ω—Ç–∞:")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    chat_id = update.effective_chat.id

    if chat_id not in user_data:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å /start üå∏", disable_web_page_preview=True)
        return

    data = user_data[chat_id]
    —à–∞–±–ª–æ–Ω = data["—à–∞–±–ª–æ–Ω"]
    —à–∞–≥ = data["—à–∞–≥"]
    –ø–æ–ª—è = FIELDS_ZAKL if —à–∞–±–ª–æ–Ω == "–∑–∞–∫–ª—é—á–µ–Ω–∏–µ" else FIELDS_UZI

    if —à–∞–≥ < len(–ø–æ–ª—è):
        data["–ø–æ–ª—è"][–ø–æ–ª—è[—à–∞–≥]] = text
        data["—à–∞–≥"] += 1

    if data["—à–∞–≥"] < len(–ø–æ–ª—è):
        await update.message.reply_text(f"–í–≤–µ–¥–∏—Ç–µ {–ø–æ–ª—è[data['—à–∞–≥']]}:", disable_web_page_preview=True)
    else:
        filepath = generate_pdf(data["–ø–æ–ª—è"], "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ç–∏–≤–Ω–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ" if —à–∞–±–ª–æ–Ω == "–∑–∞–∫–ª—é—á–µ–Ω–∏–µ" else "–£–ó–ò –¥–ª—è –±–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö")
        with open(filepath, "rb") as f:
            await update.message.reply_document(
                document=BytesIO(f.read()),
                filename=os.path.basename(filepath),
                caption="–ü—Ä–æ—Ç–æ–∫–æ–ª üå∏"
            )
        del user_data[chat_id]

if __name__ == "__main__":
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(handle_callback))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.run_polling()
